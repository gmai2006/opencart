file(packageName, className, fields, methods, fromJson, pbclassName, procedure, fromArray, toJsonArray, toString) ::= <<
package <packageName>;

import java.io.Serializable;

import javax.xml.bind.annotation.XmlRootElement;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.opencart.utils.BeanUtils;

/**
*/
@XmlRootElement
public class <className> implements Serializable {
  static Log logger = LogFactory.getLog(<className>.class);
  
  <fields ; separator="\n">
  
  <methods ; separator="\n">
  
  public String toJson() {
    Gson gson = new GsonBuilder()
           .setDateFormat("yyyy-MM-dd").create();
    return gson.toJson(this);
  }
  
  <fromArray>
    
  <toString>
}
>>

getMethod(name, type, className) ::= <<
public <type> get<className>() {
  return this.<name>;
}
>>

setMethod(name, type, className) ::= <<
public void set<className>( <type> value) {
  this.<name> = value;
}
>>

toString(names) ::= <<
public String toString() {
  StringBuilder builder = new StringBuilder();
  <names : { name |  builder.append(String.valueOf(this.<name>)); }; separator="\n">;
  return builder.toString();
}
>>

fromJson(className, sets) ::= <<
public static <className> fromJson(JsonObject o) {
  Gson gson = new GsonBuilder()
         .setDateFormat("yyyy-MM-dd").create();
    return gson.fromJson(o, <className>.class);
  }
>>

fromJsonOld(className, sets) ::= <<
public static <className> fromJson(JsonObject o) {
    <className> result = new <className>();
    <sets ; separator="\n">
    return result;
  }
>>

toJsonArray(className) ::= <<
public static JsonArray toJsonArray(List\<<className>\> list) {
    JsonArray array = new JsonArray();
    for (<className> dao : list) {
      array.add(dao.toJson());
    }
    return array;
  }
>>

set(className, name, type) ::= <<
  if (null != o.get("<name>") && !o.get("<name>").isJsonNull()) {
    result.set<className>(<type>.valueOf(o.get("<name>").getAsString()));
  } else {
    result.set<className>(null);
  }
>>

fromArray(className, getArrayST, type) ::= <<
public static <className> fromArray(Object[] o) {
    <className> result = new <className>();
    int i = 0;
    <getArrayST ; separator="\n">
    return result;
  }
>>

getArrayST(className, type) ::= <<
  result.set<className>((<type>)BeanUtils.getNullableValue(o[i++]));
>>

getArraySTDebug(className, type) ::= <<
      try {
        <type> val = (<type>)Utils.getNullableValue(o[i]);
      } catch (Exception ex) {
        logger.error("Unable to cast <className> to <type> at index [" + i + "] "  + o[i].toString());
      }
  result.set<className>((<type>)Utils.getNullableValue(o[i++]));
>>

angularModel(className, fields) ::= <<
  export class <className> {
    <fields ; separator="\n">
    
    constructor() {
    }
}
>>

angularField(name, type) ::= <<
  public <name>: <type>;
>>